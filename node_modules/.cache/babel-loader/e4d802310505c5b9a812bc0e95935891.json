{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\OpenServer\\\\domains\\\\my-app\\\\my-app\\\\src\\\\App.js\";\nimport React, { Component } from 'react';\nimport Loader from './loader/loader';\nimport Table from './table/table';\nimport _ from 'lodash';\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      isLoading: true,\n      data: [],\n      sort: 'asc',\n      //desc\n      sortField: 'id'\n    };\n\n    this.onSort = sortField => {\n      const clonedData = this.state.data.concat();\n      const sortType = this.state.sort === 'asc' ? 'desc' : 'asc';\n\n      const orderData = _.orderBy(clonedData, sortField, sortType);\n    };\n  }\n\n  async componentDidMount() {\n    const response = await fetch('http://www.filltext.com/?rows=32&id=%7Bnumber%7C1000%7D&firstName=%7BfirstName%7D&lastName=%7BlastName%7D&email=%7Bemail%7D&phone=%7Bphone%7C(xxx)xxx-xx-xx%7D&address=%7BaddressObject%7D&description=%7Blorem%7C32%7D');\n    const data = await response.json();\n    this.setState({\n      isLoading: false,\n      data\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: this.state.isLoading ? /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(Table, {\n        data: this.state.data,\n        onSort: this.onSort\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["D:/OpenServer/domains/my-app/my-app/src/App.js"],"names":["React","Component","Loader","Table","_","App","state","isLoading","data","sort","sortField","onSort","clonedData","concat","sortType","orderData","orderBy","componentDidMount","response","fetch","json","setState","render"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,MAAP,MAAmB,iBAAnB;AACA,OAAOC,KAAP,MAAkB,eAAlB;AACA,OAAOC,CAAP,MAAc,QAAd;;AACA,MAAMC,GAAN,SAAkBJ,SAAlB,CAA4B;AAAA;AAAA;AAAA,SAE1BK,KAF0B,GAElB;AACNC,MAAAA,SAAS,EAAE,IADL;AAENC,MAAAA,IAAI,EAAE,EAFA;AAGNC,MAAAA,IAAI,EAAE,KAHA;AAGO;AACbC,MAAAA,SAAS,EAAE;AAJL,KAFkB;;AAAA,SAmB1BC,MAnB0B,GAmBjBD,SAAS,IAAI;AACpB,YAAME,UAAU,GAAG,KAAKN,KAAL,CAAWE,IAAX,CAAgBK,MAAhB,EAAnB;AACA,YAAMC,QAAQ,GAAG,KAAKR,KAAL,CAAWG,IAAX,KAAoB,KAApB,GAA4B,MAA5B,GAAqC,KAAtD;;AAEA,YAAMM,SAAS,GAAGX,CAAC,CAACY,OAAF,CAAUJ,UAAV,EAAsBF,SAAtB,EAAiCI,QAAjC,CAAlB;AAKD,KA5ByB;AAAA;;AAS1B,QAAMG,iBAAN,GAA0B;AACxB,UAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,yNAAD,CAA5B;AACA,UAAMX,IAAI,GAAG,MAAMU,QAAQ,CAACE,IAAT,EAAnB;AAEA,SAAKC,QAAL,CAAc;AACZd,MAAAA,SAAS,EAAE,KADC;AAEZC,MAAAA;AAFY,KAAd;AAKD;;AAaDc,EAAAA,MAAM,GAAG;AACP,wBACE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,gBACG,KAAKhB,KAAL,CAAWC,SAAX,gBACG,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,cADH,gBAEG,QAAC,KAAD;AACA,QAAA,IAAI,EAAE,KAAKD,KAAL,CAAWE,IADjB;AAEA,QAAA,MAAM,EAAE,KAAKG;AAFb;AAAA;AAAA;AAAA;AAAA;AAHN;AAAA;AAAA;AAAA;AAAA,YADF;AAeD;;AA/CyB;;AAkD5B,eAAeN,GAAf","sourcesContent":["import React, { Component } from 'react'\nimport Loader from './loader/loader'\nimport Table from './table/table'\nimport _ from 'lodash'\nclass App extends Component {\n\n  state = {\n    isLoading: true,\n    data: [],\n    sort: 'asc', //desc\n    sortField: 'id'\n  }\n\n  async componentDidMount() {\n    const response = await fetch('http://www.filltext.com/?rows=32&id=%7Bnumber%7C1000%7D&firstName=%7BfirstName%7D&lastName=%7BlastName%7D&email=%7Bemail%7D&phone=%7Bphone%7C(xxx)xxx-xx-xx%7D&address=%7BaddressObject%7D&description=%7Blorem%7C32%7D')\n    const data = await response.json();\n\n    this.setState({\n      isLoading: false,\n      data\n    })\n\n  }\n  onSort = sortField => {\n    const clonedData = this.state.data.concat()\n    const sortType = this.state.sort === 'asc' ? 'desc' : 'asc'\n    \n    const orderData = _.orderBy(clonedData, sortField, sortType)\n\n \n \n \n  }\n\n\n  render() {\n    return (\n      <div className=\"container\">\n        {this.state.isLoading\n          ? <Loader />\n          : <Table\n            data={this.state.data}\n            onSort={this.onSort}\n          />\n        }\n\n      </div>\n    );\n\n\n\n  };\n\n}\nexport default App;"]},"metadata":{},"sourceType":"module"}