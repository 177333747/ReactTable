{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\OpenServer\\\\domains\\\\my-app\\\\my-app\\\\src\\\\App.js\";\nimport React, { Component } from 'react';\nimport Loader from './loader/loader';\nimport Table from './table/table';\nimport _ from 'lodash';\nimport ReactPaginate from 'react-paginate';\nimport DetailRowView from './detailRowView/detailRowView';\nimport ModeSelector from './ModeSelector/ModeSelector';\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      isModeSelected: false,\n      isLoading: false,\n      data: [],\n      sort: 'asc',\n      //desc\n      sortField: 'id',\n      row: null\n    };\n\n    this.onSort = sortField => {\n      const clonedData = this.state.data.concat();\n      const sort = this.state.sort === 'asc' ? 'desc' : 'asc';\n\n      const data = _.orderBy(clonedData, sortField, sort);\n\n      this.setState({\n        data,\n        sort,\n        sortField\n      });\n    };\n\n    this.modeSelectHandler = url => {\n      this.setState({\n        isModeSelected: true,\n        isLoading: true\n      });\n      this.fetchData(url);\n    };\n\n    this.onRowSelect = row => {\n      this.setState({\n        row\n      });\n    };\n  }\n\n  async fetchData(url) {\n    const response = await fetch(url);\n    const data = await response.json();\n    this.setState({\n      isLoading: false,\n      data: _.orderBy(data, this.state.sortField, this.state.sort)\n    });\n  }\n\n  render() {\n    if (!this.state.isModeSelected) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\",\n        children: /*#__PURE__*/_jsxDEV(ModeSelector, {\n          onSelect: this.modeSelectHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [this.state.isLoading ? /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(Table, {\n        data: this.state.data,\n        onSort: this.onSort,\n        sort: this.state.sort,\n        sortField: this.state.sortField,\n        onRowSelect: this.onRowSelect\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 13\n      }, this), this.state.data.length > pageSize ? /*#__PURE__*/_jsxDEV(ReactPaginate, {\n        previousLabel: 'previous',\n        nextLabel: 'next',\n        breakLabel: '...',\n        breakClassName: 'break-me',\n        pageCount: this.state.pageCount,\n        marginPagesDisplayed: 2,\n        pageRangeDisplayed: 5,\n        onPageChange: this.handlePageClick,\n        containerClassName: 'pagination',\n        subContainerClassName: 'pages pagination',\n        activeClassName: 'active'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 13\n      }, this) : null, this.state.row ? /*#__PURE__*/_jsxDEV(DetailRowView, {\n        person: this.state.row\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 15\n      }, this) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["D:/OpenServer/domains/my-app/my-app/src/App.js"],"names":["React","Component","Loader","Table","_","ReactPaginate","DetailRowView","ModeSelector","App","state","isModeSelected","isLoading","data","sort","sortField","row","onSort","clonedData","concat","orderBy","setState","modeSelectHandler","url","fetchData","onRowSelect","response","fetch","json","render","length","pageSize","pageCount","handlePageClick"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,MAAP,MAAmB,iBAAnB;AACA,OAAOC,KAAP,MAAkB,eAAlB;AACA,OAAOC,CAAP,MAAc,QAAd;AACA,OAAOC,aAAP,MAA0B,gBAA1B;AACA,OAAOC,aAAP,MAA0B,+BAA1B;AACA,OAAOC,YAAP,MAAyB,6BAAzB;;AAEA,MAAMC,GAAN,SAAkBP,SAAlB,CAA4B;AAAA;AAAA;AAAA,SAE1BQ,KAF0B,GAElB;AACNC,MAAAA,cAAc,EAAE,KADV;AAENC,MAAAA,SAAS,EAAE,KAFL;AAGNC,MAAAA,IAAI,EAAE,EAHA;AAINC,MAAAA,IAAI,EAAE,KAJA;AAIO;AACbC,MAAAA,SAAS,EAAE,IALL;AAMNC,MAAAA,GAAG,EAAE;AANC,KAFkB;;AAAA,SAuB1BC,MAvB0B,GAuBjBF,SAAS,IAAI;AACpB,YAAMG,UAAU,GAAG,KAAKR,KAAL,CAAWG,IAAX,CAAgBM,MAAhB,EAAnB;AACA,YAAML,IAAI,GAAG,KAAKJ,KAAL,CAAWI,IAAX,KAAoB,KAApB,GAA4B,MAA5B,GAAqC,KAAlD;;AACA,YAAMD,IAAI,GAAGR,CAAC,CAACe,OAAF,CAAUF,UAAV,EAAsBH,SAAtB,EAAiCD,IAAjC,CAAb;;AAGA,WAAKO,QAAL,CAAc;AACZR,QAAAA,IADY;AAEZC,QAAAA,IAFY;AAGZC,QAAAA;AAHY,OAAd;AAMD,KAnCyB;;AAAA,SAsC1BO,iBAtC0B,GAsCNC,GAAG,IAAI;AACzB,WAAKF,QAAL,CAAc;AACZV,QAAAA,cAAc,EAAE,IADJ;AAEZC,QAAAA,SAAS,EAAE;AAFC,OAAd;AAMA,WAAKY,SAAL,CAAeD,GAAf;AAED,KA/CyB;;AAAA,SAgD5BE,WAhD4B,GAgDdT,GAAG,IAAI;AACjB,WAAKK,QAAL,CAAc;AAAEL,QAAAA;AAAF,OAAd;AACD,KAlDyB;AAAA;;AAY1B,QAAMQ,SAAN,CAAgBD,GAAhB,EAAqB;AACnB,UAAMG,QAAQ,GAAG,MAAMC,KAAK,CAACJ,GAAD,CAA5B;AACA,UAAMV,IAAI,GAAG,MAAMa,QAAQ,CAACE,IAAT,EAAnB;AACA,SAAKP,QAAL,CAAc;AACZT,MAAAA,SAAS,EAAE,KADC;AAEZC,MAAAA,IAAI,EAAER,CAAC,CAACe,OAAF,CAAUP,IAAV,EAAgB,KAAKH,KAAL,CAAWK,SAA3B,EAAsC,KAAKL,KAAL,CAAWI,IAAjD;AAFM,KAAd;AAMD;;AA+BDe,EAAAA,MAAM,GAAG;AACP,QAAI,CAAC,KAAKnB,KAAL,CAAWC,cAAhB,EAAgC;AAC9B,0BACE;AAAK,QAAA,SAAS,EAAC,WAAf;AAAA,+BACE,QAAC,YAAD;AAAc,UAAA,QAAQ,EAAE,KAAKW;AAA7B;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cADF;AAKD;;AAED,wBACE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,iBACG,KAAKZ,KAAL,CAAWE,SAAX,gBACG,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,cADH,gBAEG,QAAC,KAAD;AACA,QAAA,IAAI,EAAE,KAAKF,KAAL,CAAWG,IADjB;AAEA,QAAA,MAAM,EAAE,KAAKI,MAFb;AAGA,QAAA,IAAI,EAAE,KAAKP,KAAL,CAAWI,IAHjB;AAIA,QAAA,SAAS,EAAE,KAAKJ,KAAL,CAAWK,SAJtB;AAKA,QAAA,WAAW,EAAE,KAAKU;AALlB;AAAA;AAAA;AAAA;AAAA,cAHN,EAeE,KAAKf,KAAL,CAAWG,IAAX,CAAgBiB,MAAhB,GAAyBC,QAAzB,gBACI,QAAC,aAAD;AACJ,QAAA,aAAa,EAAE,UADX;AAEJ,QAAA,SAAS,EAAE,MAFP;AAGJ,QAAA,UAAU,EAAE,KAHR;AAIJ,QAAA,cAAc,EAAE,UAJZ;AAKJ,QAAA,SAAS,EAAE,KAAKrB,KAAL,CAAWsB,SALlB;AAMJ,QAAA,oBAAoB,EAAE,CANlB;AAOJ,QAAA,kBAAkB,EAAE,CAPhB;AAQJ,QAAA,YAAY,EAAE,KAAKC,eARf;AASJ,QAAA,kBAAkB,EAAE,YAThB;AAUJ,QAAA,qBAAqB,EAAE,kBAVnB;AAWJ,QAAA,eAAe,EAAE;AAXb;AAAA;AAAA;AAAA;AAAA,cADJ,GAcD,IA7BD,EAmCI,KAAKvB,KAAL,CAAWM,GAAX,gBACI,QAAC,aAAD;AAAe,QAAA,MAAM,EAAE,KAAKN,KAAL,CAAWM;AAAlC;AAAA;AAAA;AAAA;AAAA,cADJ,GAEI,IArCR;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AA8CD;;AA3GyB;;AA8G5B,eAAeP,GAAf","sourcesContent":["import React, { Component } from 'react'\nimport Loader from './loader/loader'\nimport Table from './table/table'\nimport _ from 'lodash'\nimport ReactPaginate from 'react-paginate';\nimport DetailRowView from './detailRowView/detailRowView'\nimport ModeSelector from './ModeSelector/ModeSelector'\n\nclass App extends Component {\n\n  state = {\n    isModeSelected: false,\n    isLoading: false,\n    data: [],\n    sort: 'asc', //desc\n    sortField: 'id',\n    row: null,\n\n  }\n\n  async fetchData(url) {\n    const response = await fetch(url)\n    const data = await response.json();\n    this.setState({\n      isLoading: false,\n      data: _.orderBy(data, this.state.sortField, this.state.sort)\n\n    })\n\n  }\n\n  onSort = sortField => {\n    const clonedData = this.state.data.concat()\n    const sort = this.state.sort === 'asc' ? 'desc' : 'asc'\n    const data = _.orderBy(clonedData, sortField, sort)\n\n\n    this.setState({\n      data,\n      sort,\n      sortField\n    })\n\n  }\n\n  \n  modeSelectHandler = url => {\n    this.setState({\n      isModeSelected: true,\n      isLoading: true\n\n    })\n\n    this.fetchData(url)\n   \n  }\nonRowSelect = row => {\n    this.setState({ row })\n  }\n\n  render() {\n    if (!this.state.isModeSelected) {\n      return (\n        <div className=\"container\">\n          <ModeSelector onSelect={this.modeSelectHandler} />\n        </div>\n      )\n    }\n\n    return (\n      <div className=\"container\">\n        {this.state.isLoading\n          ? <Loader />\n          : <Table\n            data={this.state.data}\n            onSort={this.onSort}\n            sort={this.state.sort}\n            sortField={this.state.sortField}\n            onRowSelect={this.onRowSelect}\n          />\n\n        }\n\n        {\n        \n        this.state.data.length > pageSize\n        ?   <ReactPaginate\n        previousLabel={'previous'}\n        nextLabel={'next'}\n        breakLabel={'...'}\n        breakClassName={'break-me'}\n        pageCount={this.state.pageCount}\n        marginPagesDisplayed={2}\n        pageRangeDisplayed={5}\n        onPageChange={this.handlePageClick}\n        containerClassName={'pagination'}\n        subContainerClassName={'pages pagination'}\n        activeClassName={'active'}\n      />\n      :null\n        \n        }\n\n        \n        {\n          this.state.row\n            ? <DetailRowView person={this.state.row} />\n            : null\n        }\n\n      </div>\n    );\n\n\n\n  };\n\n}\nexport default App;"]},"metadata":{},"sourceType":"module"}